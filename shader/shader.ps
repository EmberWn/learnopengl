#version 330 core
out vec4 FragColor;
in vec3 Normal;
in vec3 FragPos;

struct Material
{
   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
   float shininess;
};

uniform Material material;

struct Light
{
   vec3 position;

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
};

uniform Light light;

uniform vec3 object_color;
uniform vec3 light_color;
uniform sampler2D texture1;
uniform sampler2D texture2;
uniform vec3 light_pos;
uniform vec3 view_pos;
void main()
{
   vec3 ambient = material.ambient * light.ambient;

   vec3 norm = normalize(Normal);
   vec3 light_dir = normalize(light.position - FragPos);
   float diff = max(dot(norm, light_dir), 0.0);
   vec3 diffuse = material.diffuse * diff * light.diffuse;

   vec3 view_dir = normalize(view_pos - FragPos);
   vec3 reflect_dir = reflect(-light_dir, norm);
   float spec = pow(max(dot(view_dir, reflect_dir), 0.0), material.shininess);
   vec3 specular = material.specular * spec * light.specular;

   vec3 result = ambient + diffuse + specular;
   FragColor = vec4(result, 1.0);

}
