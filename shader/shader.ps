#version 330 core
out vec4 FragColor;

in VS_OUT
{
   vec3 FragPos;
   vec2 TexCoords;
   vec3 TangentLightPos;
   vec3 TangentViewPos;
   vec3 TangentFragPos;
} fs_in;

uniform sampler2D texture_diffuse;
uniform sampler2D texture_normal;
uniform sampler2D depthMap;

uniform float heightScale;

struct Material
{
   sampler2D diffuse;
   sampler2D specular;
   sampler2D texture_diffuse1;
   sampler2D texture_diffuse2;
   sampler2D texture_diffuse3;
   sampler2D texture_specular1;
   sampler2D texture_specular2;
   float shininess;
};

uniform Material material;

struct DirLight
{
   vec3 direction;

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
};

struct PointLight
{
   vec3 position;

   float constant;
   float linear;
   float quadratic;

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;
};

struct SpotLight
{
   vec3 position;
   vec3 direction;

   vec3 ambient;
   vec3 diffuse;
   vec3 specular;

   float cut_off;
   float outer_cut_off;
};

uniform DirLight dir_light;
#define NR_POINT_LIGHTS 4
uniform PointLight point_lights[NR_POINT_LIGHTS];
uniform SpotLight spot_light;


vec3 CalcDirLight(DirLight light, vec3 normal, vec3 view_dir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 frag_pos, vec3 view_dir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 frag_pos, vec3 view_dir);


float near = 0.1;
float far = 100.0;

float LinearizeDepth(float depth)
{
   float z = depth * 2.0 - 1.0;
   return (2.0 * near * far) / (far + near - z * (far - near));
}

vec2 ParallaxMapping(vec2 texCoords, vec3  viewDir)
{
   const float minLayers = 8;
   const float maxLayers = 32;
   float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));

   float layerDepth = 1.0 / numLayers;
   float currentLayerDepth = 0.0;
   vec2 p = viewDir.xy / viewDir.z * heightScale;
   vec2 deltaTexCoords = p / numLayers;

   vec2 currentTexCoords = texCoords;
   float currentDepthMapValue = texture(depthMap, currentTexCoords).r;

   while(currentLayerDepth < currentDepthMapValue)
   {
      currentTexCoords -= deltaTexCoords;
      currentDepthMapValue = texture(depthMap, currentTexCoords).r;
      currentLayerDepth += layerDepth;
   }

   vec2 prevTexCoords = currentTexCoords + deltaTexCoords;
   float afterDepth = currentDepthMapValue - currentLayerDepth;
   float beforeDepth = texture(depthMap, prevTexCoords).r - currentLayerDepth + layerDepth;
   float weight = afterDepth / (afterDepth - beforeDepth);
   vec2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0 - weight);
   return finalTexCoords;
}

void main()
{
   // vec3 normal = normalize(Normal);
   vec3 view_dir = normalize(fs_in.TangentViewPos - fs_in.TangentFragPos);

   // vec3 result = vec3(0.0, 0.0, 0.0);

   // result += CalcSpotLight(spot_light, norm, FragPos, view_dir);
   // result += CalcDirLight(dir_light, norm, view_dir);

   // for(int i = 0; i < NR_POINT_LIGHTS; ++i)
   // {
   //    result += CalcPointLight(point_lights[i], norm, FragPos, view_dir);
   // }

   // FragColor = vec4(result, 1.0);

   vec2 texCoords = ParallaxMapping(fs_in.TexCoords, view_dir);
   if(texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)
   {
      discard;
   }

   vec3 texColor = texture(texture_diffuse, texCoords).rgb;
   // ambient
   vec3 ambient = 0.1 * texColor;
   // diffuse
   vec3 normal = texture(texture_normal, texCoords).rgb;
   normal = normalize(normal * 2.0 - 1.0);
   vec3 lightDir = normalize(fs_in.TangentLightPos - fs_in.TangentFragPos);
   float diff = max(dot(lightDir, normal), 0.0);
   vec3 diffuse = diff * texColor;
   // specular
   vec3 reflectDir = reflect(-lightDir, normal);
   float spec = 0.0;
   vec3 halfwayDir = normalize(lightDir + view_dir);  
   spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
   
   vec3 specular = vec3(0.2) * spec; // assuming bright white light color
   FragColor = vec4(ambient + diffuse + specular, 1.0);

}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 halfwayDir = normalize(lightDir + viewDir);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.texture_diffuse1, fs_in.TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.texture_diffuse1, fs_in.TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, fs_in.TexCoords));
    return (ambient + diffuse + specular);
}  

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
   vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 halfwayDir = normalize(lightDir + viewDir);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.texture_diffuse1, fs_in.TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.texture_diffuse1, fs_in.TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, fs_in.TexCoords));
    return (ambient + diffuse + specular);

} 

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{

    vec3 lightDir = normalize(light.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 halfwayDir = normalize(lightDir + viewDir);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // intesity
   float theta = dot(lightDir, normalize(-light.direction));
   float epsilon = light.cut_off - light.outer_cut_off;
   float intensity = clamp((theta - light.outer_cut_off) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.texture_diffuse1, fs_in.TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.texture_diffuse1, fs_in.TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, fs_in.TexCoords));
    diffuse  *= intensity;
    specular *= intensity;
    return (ambient + diffuse + specular);

}